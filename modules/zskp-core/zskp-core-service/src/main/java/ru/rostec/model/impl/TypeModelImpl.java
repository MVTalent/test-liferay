/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ru.rostec.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import ru.rostec.model.Type;
import ru.rostec.model.TypeModel;
import ru.rostec.model.TypeSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Type service. Represents a row in the &quot;ZSKP_Type&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link TypeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TypeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TypeImpl
 * @see Type
 * @see TypeModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class TypeModelImpl extends BaseModelImpl<Type> implements TypeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a type model instance should use the {@link Type} interface instead.
	 */
	public static final String TABLE_NAME = "ZSKP_Type";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "code_", Types.VARCHAR },
			{ "name", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("code_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table ZSKP_Type (id_ LONG not null primary key,code_ VARCHAR(75) null,name VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table ZSKP_Type";
	public static final String ORDER_BY_JPQL = " ORDER BY type.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ZSKP_Type.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(ru.rostec.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.ru.rostec.model.Type"), true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(ru.rostec.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.ru.rostec.model.Type"), true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Type toModel(TypeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Type model = new TypeImpl();

		model.setId(soapModel.getId());
		model.setCode(soapModel.getCode());
		model.setName(soapModel.getName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Type> toModels(TypeSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Type> models = new ArrayList<Type>(soapModels.length);

		for (TypeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(ru.rostec.service.util.ServiceProps.get(
				"lock.expiration.time.ru.rostec.model.Type"));

	public TypeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Type.class;
	}

	@Override
	public String getModelClassName() {
		return Type.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Type, Object>> attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Type, Object>> entry : attributeGetterFunctions.entrySet()) {
			String attributeName = entry.getKey();
			Function<Type, Object> attributeGetterFunction = entry.getValue();

			attributes.put(attributeName,
				attributeGetterFunction.apply((Type)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Type, Object>> attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Type, Object> attributeSetterBiConsumer = attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Type)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Type, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Type, Object>> getAttributeSetterBiConsumers() {
		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Type, Object>> _attributeGetterFunctions;
	private static final Map<String, BiConsumer<Type, Object>> _attributeSetterBiConsumers;

	static {
		Map<String, Function<Type, Object>> attributeGetterFunctions = new LinkedHashMap<String, Function<Type, Object>>();
		Map<String, BiConsumer<Type, ?>> attributeSetterBiConsumers = new LinkedHashMap<String, BiConsumer<Type, ?>>();


		attributeGetterFunctions.put(
			"id",
			new Function<Type, Object>() {

				@Override
				public Object apply(Type type) {
					return type.getId();
				}

			});
		attributeSetterBiConsumers.put(
			"id",
			new BiConsumer<Type, Object>() {

				@Override
				public void accept(Type type, Object id) {
					type.setId((Long)id);
				}

			});
		attributeGetterFunctions.put(
			"code",
			new Function<Type, Object>() {

				@Override
				public Object apply(Type type) {
					return type.getCode();
				}

			});
		attributeSetterBiConsumers.put(
			"code",
			new BiConsumer<Type, Object>() {

				@Override
				public void accept(Type type, Object code) {
					type.setCode((String)code);
				}

			});
		attributeGetterFunctions.put(
			"name",
			new Function<Type, Object>() {

				@Override
				public Object apply(Type type) {
					return type.getName();
				}

			});
		attributeSetterBiConsumers.put(
			"name",
			new BiConsumer<Type, Object>() {

				@Override
				public void accept(Type type, Object name) {
					type.setName((String)name);
				}

			});


		_attributeGetterFunctions = Collections.unmodifiableMap(attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap((Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public String getCode() {
		if (_code == null) {
			return "";
		}
		else {
			return _code;
		}
	}

	@Override
	public void setCode(String code) {
		_code = code;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Type.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Type toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Type)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TypeImpl typeImpl = new TypeImpl();

		typeImpl.setId(getId());
		typeImpl.setCode(getCode());
		typeImpl.setName(getName());

		typeImpl.resetOriginalValues();

		return typeImpl;
	}

	@Override
	public int compareTo(Type type) {
		long primaryKey = type.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Type)) {
			return false;
		}

		Type type = (Type)obj;

		long primaryKey = type.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Type> toCacheModel() {
		TypeCacheModel typeCacheModel = new TypeCacheModel();

		typeCacheModel.id = getId();

		typeCacheModel.code = getCode();

		String code = typeCacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			typeCacheModel.code = null;
		}

		typeCacheModel.name = getName();

		String name = typeCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			typeCacheModel.name = null;
		}

		return typeCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Type, Object>> attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler((4 * attributeGetterFunctions.size()) +
				2);

		sb.append("{");

		for (Map.Entry<String, Function<Type, Object>> entry : attributeGetterFunctions.entrySet()) {
			String attributeName = entry.getKey();
			Function<Type, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Type)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Type, Object>> attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler((5 * attributeGetterFunctions.size()) +
				4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Type, Object>> entry : attributeGetterFunctions.entrySet()) {
			String attributeName = entry.getKey();
			Function<Type, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Type)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Type.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Type.class, ModelWrapper.class
		};
	private long _id;
	private String _code;
	private String _name;
	private Type _escapedModel;
}