/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.javasavvy.process.core.service.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import org.javasavvy.process.core.service.model.Process;
import org.javasavvy.process.core.service.model.ProcessModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Process service. Represents a row in the &quot;zskp_Process&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ProcessModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProcessImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProcessImpl
 * @see Process
 * @see ProcessModel
 * @generated
 */
@ProviderType
public class ProcessModelImpl extends BaseModelImpl<Process>
	implements ProcessModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a process model instance should use the {@link Process} interface instead.
	 */
	public static final String TABLE_NAME = "zskp_Process";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "processId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "type_", Types.BIGINT },
			{ "kind", Types.BIGINT },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("processId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("type_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("kind", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table zskp_Process (uuid_ VARCHAR(75) null,processId LONG not null primary key,name VARCHAR(75) null,type_ LONG,kind LONG,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table zskp_Process";
	public static final String ORDER_BY_JPQL = " ORDER BY process.name ASC";
	public static final String ORDER_BY_SQL = " ORDER BY zskp_Process.name ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(org.javasavvy.process.core.service.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.org.javasavvy.process.core.service.model.Process"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(org.javasavvy.process.core.service.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.org.javasavvy.process.core.service.model.Process"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(org.javasavvy.process.core.service.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.javasavvy.process.core.service.model.Process"),
			true);
	public static final long NAME_COLUMN_BITMASK = 1L;
	public static final long UUID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(org.javasavvy.process.core.service.service.util.ServiceProps.get(
				"lock.expiration.time.org.javasavvy.process.core.service.model.Process"));

	public ProcessModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _processId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProcessId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _processId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Process.class;
	}

	@Override
	public String getModelClassName() {
		return Process.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Process, Object>> attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Process, Object>> entry : attributeGetterFunctions.entrySet()) {
			String attributeName = entry.getKey();
			Function<Process, Object> attributeGetterFunction = entry.getValue();

			attributes.put(attributeName,
				attributeGetterFunction.apply((Process)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Process, Object>> attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Process, Object> attributeSetterBiConsumer = attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Process)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Process, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Process, Object>> getAttributeSetterBiConsumers() {
		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Process, Object>> _attributeGetterFunctions;
	private static final Map<String, BiConsumer<Process, Object>> _attributeSetterBiConsumers;

	static {
		Map<String, Function<Process, Object>> attributeGetterFunctions = new LinkedHashMap<String, Function<Process, Object>>();
		Map<String, BiConsumer<Process, ?>> attributeSetterBiConsumers = new LinkedHashMap<String, BiConsumer<Process, ?>>();


		attributeGetterFunctions.put(
			"uuid",
			new Function<Process, Object>() {

				@Override
				public Object apply(Process process) {
					return process.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<Process, Object>() {

				@Override
				public void accept(Process process, Object uuid) {
					process.setUuid((String)uuid);
				}

			});
		attributeGetterFunctions.put(
			"processId",
			new Function<Process, Object>() {

				@Override
				public Object apply(Process process) {
					return process.getProcessId();
				}

			});
		attributeSetterBiConsumers.put(
			"processId",
			new BiConsumer<Process, Object>() {

				@Override
				public void accept(Process process, Object processId) {
					process.setProcessId((Long)processId);
				}

			});
		attributeGetterFunctions.put(
			"name",
			new Function<Process, Object>() {

				@Override
				public Object apply(Process process) {
					return process.getName();
				}

			});
		attributeSetterBiConsumers.put(
			"name",
			new BiConsumer<Process, Object>() {

				@Override
				public void accept(Process process, Object name) {
					process.setName((String)name);
				}

			});
		attributeGetterFunctions.put(
			"type",
			new Function<Process, Object>() {

				@Override
				public Object apply(Process process) {
					return process.getType();
				}

			});
		attributeSetterBiConsumers.put(
			"type",
			new BiConsumer<Process, Object>() {

				@Override
				public void accept(Process process, Object type) {
					process.setType((Long)type);
				}

			});
		attributeGetterFunctions.put(
			"kind",
			new Function<Process, Object>() {

				@Override
				public Object apply(Process process) {
					return process.getKind();
				}

			});
		attributeSetterBiConsumers.put(
			"kind",
			new BiConsumer<Process, Object>() {

				@Override
				public void accept(Process process, Object kind) {
					process.setKind((Long)kind);
				}

			});
		attributeGetterFunctions.put(
			"status",
			new Function<Process, Object>() {

				@Override
				public Object apply(Process process) {
					return process.getStatus();
				}

			});
		attributeSetterBiConsumers.put(
			"status",
			new BiConsumer<Process, Object>() {

				@Override
				public void accept(Process process, Object status) {
					process.setStatus((Integer)status);
				}

			});
		attributeGetterFunctions.put(
			"statusByUserId",
			new Function<Process, Object>() {

				@Override
				public Object apply(Process process) {
					return process.getStatusByUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"statusByUserId",
			new BiConsumer<Process, Object>() {

				@Override
				public void accept(Process process, Object statusByUserId) {
					process.setStatusByUserId((Long)statusByUserId);
				}

			});
		attributeGetterFunctions.put(
			"statusByUserName",
			new Function<Process, Object>() {

				@Override
				public Object apply(Process process) {
					return process.getStatusByUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"statusByUserName",
			new BiConsumer<Process, Object>() {

				@Override
				public void accept(Process process, Object statusByUserName) {
					process.setStatusByUserName((String)statusByUserName);
				}

			});
		attributeGetterFunctions.put(
			"statusDate",
			new Function<Process, Object>() {

				@Override
				public Object apply(Process process) {
					return process.getStatusDate();
				}

			});
		attributeSetterBiConsumers.put(
			"statusDate",
			new BiConsumer<Process, Object>() {

				@Override
				public void accept(Process process, Object statusDate) {
					process.setStatusDate((Date)statusDate);
				}

			});


		_attributeGetterFunctions = Collections.unmodifiableMap(attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap((Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getProcessId() {
		return _processId;
	}

	@Override
	public void setProcessId(long processId) {
		_processId = processId;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask = -1L;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@Override
	public long getType() {
		return _type;
	}

	@Override
	public void setType(long type) {
		_type = type;
	}

	@Override
	public long getKind() {
		return _kind;
	}

	@Override
	public void setKind(long kind) {
		_kind = kind;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Process.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Process toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Process)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProcessImpl processImpl = new ProcessImpl();

		processImpl.setUuid(getUuid());
		processImpl.setProcessId(getProcessId());
		processImpl.setName(getName());
		processImpl.setType(getType());
		processImpl.setKind(getKind());
		processImpl.setStatus(getStatus());
		processImpl.setStatusByUserId(getStatusByUserId());
		processImpl.setStatusByUserName(getStatusByUserName());
		processImpl.setStatusDate(getStatusDate());

		processImpl.resetOriginalValues();

		return processImpl;
	}

	@Override
	public int compareTo(Process process) {
		int value = 0;

		value = getName().compareTo(process.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Process)) {
			return false;
		}

		Process process = (Process)obj;

		long primaryKey = process.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ProcessModelImpl processModelImpl = this;

		processModelImpl._originalUuid = processModelImpl._uuid;

		processModelImpl._originalName = processModelImpl._name;

		processModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Process> toCacheModel() {
		ProcessCacheModel processCacheModel = new ProcessCacheModel();

		processCacheModel.uuid = getUuid();

		String uuid = processCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			processCacheModel.uuid = null;
		}

		processCacheModel.processId = getProcessId();

		processCacheModel.name = getName();

		String name = processCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			processCacheModel.name = null;
		}

		processCacheModel.type = getType();

		processCacheModel.kind = getKind();

		processCacheModel.status = getStatus();

		processCacheModel.statusByUserId = getStatusByUserId();

		processCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = processCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			processCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			processCacheModel.statusDate = statusDate.getTime();
		}
		else {
			processCacheModel.statusDate = Long.MIN_VALUE;
		}

		return processCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Process, Object>> attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler((4 * attributeGetterFunctions.size()) +
				2);

		sb.append("{");

		for (Map.Entry<String, Function<Process, Object>> entry : attributeGetterFunctions.entrySet()) {
			String attributeName = entry.getKey();
			Function<Process, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Process)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Process, Object>> attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler((5 * attributeGetterFunctions.size()) +
				4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Process, Object>> entry : attributeGetterFunctions.entrySet()) {
			String attributeName = entry.getKey();
			Function<Process, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Process)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Process.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Process.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _processId;
	private String _name;
	private String _originalName;
	private long _type;
	private long _kind;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private long _columnBitmask;
	private Process _escapedModel;
}